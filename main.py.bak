import os
from dotenv import load_dotenv
from openai import OpenAI
from pypdf import PdfReader
import gradio as gr

def main():
    load_dotenv(override=True)

    openai_api_key = os.getenv('OPENAI_API_KEY')
    anthropic_api_key = os.getenv('ANTHROPIC_API_KEY')
    deepseek_api_key = os.getenv('DEEPSEEK_API_KEY')

    # openai = OpenAI()
    deepseek = OpenAI(api_key=deepseek_api_key, base_url="https://api.deepseek.com/v1")

    if openai_api_key:
        print(f"OpenAI API Key exists and begins {openai_api_key[:8]}")
    else:
        print("OpenAI API Key not set")
        
    if anthropic_api_key:
        print(f"Anthropic API Key exists and begins {anthropic_api_key[:7]}")
    else:
        print("Anthropic API Key not set (and this is optional)")
        
    if deepseek_api_key:
        print(f"DeepSeek API Key exists and begins {deepseek_api_key[:3]}")
    else:
        print("DeepSeek API Key not set (and this is optional)")

    print("Hello from gradio!")

    reader = PdfReader("linkedin.pdf")
    linkedin = ""
    for page in reader.pages:
        text = page.extract_text()
        if text:
            linkedin += text

    # print(linkedin)

    with open("summary.txt", "r", encoding="utf-8") as f:
        summary = f.read()

    name = "Jordan Phillips"

    system_prompt = f"You are acting as {name}. You are answering questions on {name}'s website, \
    particularly questions related to {name}'s career, background, skills and experience. \
    Your responsibility is to represent {name} for interactions on the website as faithfully as possible. \
    You are given a summary of {name}'s background and LinkedIn profile which you can use to answer questions. \
    Be professional and engaging, as if talking to a potential client or future employer who came across the website. \
    If you don't know the answer, say so."

    system_prompt += f"\n\n## Summary:\n{summary}\n\n## LinkedIn Profile:\n{linkedin}\n\n"
    system_prompt += f"With this context, please chat with the user, always staying in character as {name}."

    def chat(message, history):
        messages = [{"role": "system", "content": system_prompt}] + history + [{"role": "user", "content": message}]
        #response = openai.chat.completions.create(model="gpt-4o-mini", messages=messages)
        response = deepseek.chat.completions.create(model="deepseek-chat", messages=messages)

        return response.choices[0].message.content
    
    gr.ChatInterface(chat, type="messages").launch()

if __name__ == "__main__":
    main()
